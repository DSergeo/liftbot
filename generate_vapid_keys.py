
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization
import base64

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
private_key = ec.generate_private_key(ec.SECP256R1())
public_key = private_key.public_key()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ DER —Ñ–æ—Ä–º–∞—Ç—ñ (ASN.1)
public_bytes = public_key.public_bytes(
    encoding=serialization.Encoding.X962,
    format=serialization.PublicFormat.UncompressedPoint
)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ PEM —Ñ–æ—Ä–º–∞—Ç—ñ
private_pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption()
)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ (base64 URL safe)
vapid_public_base64 = base64.urlsafe_b64encode(public_bytes).decode("utf-8").rstrip("=")

print("üîê VAPID PRIVATE KEY (PEM, –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞):")
print(private_pem.decode())

print("\nüì¢ VAPID PUBLIC KEY (Base64, –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞):")
print(vapid_public_base64)
