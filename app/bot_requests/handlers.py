import json, os, tempfile
import logging
from datetime import datetime, timedelta
from pytz import timezone
from pathlib import Path
from geopy.geocoders import Nominatim
import telebot
import unicodedata
from telebot import types
from app.bot_requests.shared import user_states, address_data, chat_action_allowed

from app.bot_requests.shared import (
    requests_list,
    save_requests_to_db,
    match_address,
    clean_street_name,
    district_names,
    district_ids,
    district_phones,
    personnel_chats,
    authorized_users,
    save_authorized_users,
    log_action,
    bot,
    send_push,
)

logger = logging.getLogger(__name__)

kyiv_tz = timezone("Europe/Kyiv")

# –∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, user_states –æ–±—ä—è–≤–∏ –≤ shared –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Å—é–¥–∞
#from app.bot_requests.shared import user_states, address_data
#from app.bot_requests.shared import chat_action_allowed
ADDRESSES_FILE = "addresses.json"


@bot.message_handler(commands=["start"])
def cmd_start(msg):
    if msg.chat.type != "private":
        return
    user_states[msg.chat.id] = {"step": "name", "user_id": msg.chat.id}
    bot.send_message(msg.chat.id, "üëã <b>–í—ñ—Ç–∞—é!</b>\n–Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–π–æ–º–∞ –∑–∞—è–≤–æ–∫ –∑ —Ä–µ–º–æ–Ω—Ç—É –ª—ñ—Ñ—Ç—ñ–≤.\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è –±—É–¥—å –ª–∞—Å–∫–∞:")

@bot.message_handler(commands=["requests"])
def cmd_requests(msg):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("üïê –û—á—ñ–∫—É—é—Ç—å", callback_data="filter:pending"),
        types.InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ", callback_data="filter:done"),
        types.InlineKeyboardButton("‚ùå –ù–µ –ø—Ä–∞—Ü—é—î", callback_data="filter:error"),
    )
    bot.send_message(msg.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.chat.type == "private", content_types=["text"])
def handle_text(msg):
    st = user_states.get(msg.chat.id)
    if not st:
        return bot.send_message(msg.chat.id, "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏.")
    step = st["step"]

    if step == "name":
        st["name"] = " ".join(msg.text.split())
        st["step"] = "choose_input"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É")
        return bot.send_message(msg.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏:", reply_markup=kb)

    if step == "choose_input":
        if msg.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É":
            st["step"] = "choose_district"
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for d in district_names:
                kb.add(d)
            return bot.send_message(msg.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:", reply_markup=kb)
        if msg.text == "üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é":
            return bot.send_message(msg.chat.id, "üìé –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É.")
        return bot.send_message(msg.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")

    if step == "choose_district":
        if msg.text not in district_names:
            return bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–∞–π–æ–Ω, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")
        st["district"], st["step"] = msg.text, "enter_address"
        return bot.send_message(msg.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É (–õ–∞–∑—É—Ä–Ω–∞ 32):", reply_markup=types.ReplyKeyboardRemove())

    if step == "enter_address":
        parts = msg.text.split()
        if len(parts) < 2:
            return bot.send_message(msg.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ + –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É")
        street, b_raw = " ".join(parts[:-1]), parts[-1]
        b = b_raw.upper()  # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±—É–∫–≤—ã –≤ –¥–æ–º–µ
        found = match_address(street, b, st["district"])
        if not found:
            return bot.send_message(msg.chat.id, "‚ùå –ê–¥—Ä–µ—Å–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")

        houses = address_data.get(st["district"], {}).get(found, {})
        entrances = houses.get(b, {}) 
        if not entrances:
            return bot.send_message(msg.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ –±—É–¥–∏–Ω–∫—É –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ.")

        if all(not v.get("active", True) for v in entrances.values()):
            return bot.send_message(msg.chat.id, "‚õîÔ∏è –¶–µ–π –∞–¥—Ä–µ—Å –Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É—î—Ç—å—Å—è –∫–æ–º–ø–∞–Ω—ñ—î—é –ï–ª–µ—Å—Ç–µ–∫.")
    
        st["address"] = f"{found}, {b}"
        st["step"] = "enter_entrance"
        return bot.send_message(msg.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—ñ–¥'—ó–∑–¥—É:", reply_markup=types.ReplyKeyboardRemove())

    if step == "enter_entrance":
        print("‚û°Ô∏è –í–≤–µ–¥–µ–Ω–æ –ø—ñ–¥'—ó–∑–¥:", msg.text)
        print("‚û°Ô∏è –ê–¥—Ä–µ—Å–∞:", st.get("address"))
        print("‚û°Ô∏è –†–∞–π–æ–Ω:", st.get("district"))
        if not msg.text.isdigit() or len(msg.text) > 2:
            return bot.send_message(msg.chat.id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ (–Ω–µ –±—ñ–ª—å—à–µ 2):")

        st["entrance"] = msg.text
        try:
            street_name, house_num = st["address"].split(", ")
            entrances = address_data.get(st["district"], {}).get(street_name, {}).get(house_num, {})	

            if st["entrance"] not in entrances:
                return bot.send_message(msg.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ –ø—ñ–¥'—ó–∑–¥—É –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ.")

            if not entrances[st["entrance"]].get("active", True):
                return bot.send_message(msg.chat.id, "‚õîÔ∏è –¶–µ–π –ø—ñ–¥'—ó–∑–¥ –Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É—î—Ç—å—Å—è –∫–æ–º–ø–∞–Ω—ñ—î—é –ï–ª–µ—Å—Ç–µ–∫.")
        except Exception as e:
            print("‚õîÔ∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥'—ó–∑–¥—É:", e)
            return bot.send_message(msg.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")

        # ‚û°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ –ø—ñ—Å–ª—è ‚ùå
        print(f"‚û°Ô∏è –í–≤–µ–¥–µ–Ω–æ –ø—ñ–¥'—ó–∑–¥: {st['entrance']}")
        print(f"‚û°Ô∏è –ê–¥—Ä–µ—Å–∞: {st['address']}")
        print(f"‚û°Ô∏è –†–∞–π–æ–Ω: {st['district']}")
        print("üßæ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏...")

        for req in requests_list:
            if (
                req.get("address") == st["address"] and
                req.get("entrance") == st["entrance"] and
                req.get("status") == "error"
            ):
                try:
                    created_time = kyiv_tz.localize(datetime.strptime(req["timestamp"], "%Y-%m-%d %H:%M:%S"))
                except Exception as e:
                    print(f"‚õîÔ∏è –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É –¥–∞—Ç–∏: {e}")
                    continue

                print(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—è–≤–∫–∏: {req['address']} {req['entrance']} {req['status']}")
                print(f"üïí –ß–∞—Å –ø–æ–º–∏–ª–∫–∏: {req['timestamp']}")

                now = datetime.now(kyiv_tz)
                weekday = created_time.weekday()  # –ü–Ω=0, –ù–¥=6
                deadline = created_time + timedelta(hours=24)

                # –Ø–∫—â–æ –ü—Ç/–°–±/–ù–¥ ‚Äî –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥–æ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ 13:25
                if weekday in (4, 5, 6):
                    monday = created_time + timedelta(days=(7 - weekday))
                    deadline = monday.replace(hour=13, minute=25, second=0, microsecond=0)

                if now < deadline:
                    message = "‚ö†Ô∏è –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ø—ñ–≥–æ—Ç—É—é—Ç—å—Å—è —ñ –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —É–ø—Ä–∞–≤–ª–ª—è—é—á—ñ–π –∫–æ–º–ø–∞–Ω—ñ—ó –∞–±–æ –û–°–ë–ë"
                else:
                    message = "‚ö†Ô∏è –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ —É–ø—Ä–∞–≤–ª–ª—è—é—á—ñ–π –∫–æ–º–ø–∞–Ω—ñ—ó –∞–±–æ –û–°–ë–ë"

                phones = "\n".join(f"üìû {n}" for n in district_phones.get(st["district"], []))
                client_msg = f"{message}\n{phones}"

                kb = types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üì® –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É", callback_data="start")
                )

                bot.send_message(msg.chat.id, client_msg, reply_markup=kb)
                user_states.pop(msg.chat.id, None)
                return

        st["step"] = "enter_issue"
        return bot.send_message(msg.chat.id, "‚úçÔ∏è –û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É:")


    if step == "enter_issue":
        st["issue"] = msg.text
        st["step"] = "enter_phone"
        return bot.send_message(msg.chat.id, "üìû –¢–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä):")

    if step == "enter_phone":
        if not msg.text.isdigit() or len(msg.text) != 10:
            return bot.send_message(msg.chat.id, "‚ùå –ú–∞—î –±—É—Ç–∏ 10 —Ü–∏—Ñ—Ä.")
        st["phone"] = "+38" + msg.text
        st["timestamp"] = datetime.now(kyiv_tz).strftime("%Y-%m-%d %H:%M:%S")        
        st.update(
            completed=False,
            completed_time="",
            processed_by="",
            status="pending"
        )
        idx = len(requests_list)
        requests_list.append(st.copy())

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
        client_msg = (
            "‚úÖ <b>–ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ!</b>\n\n"
            "üìã <b>–î–∞–Ω—ñ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üë§ –Ü–º'—è: <b>{st['name']}</b>\n"
            f"üìç –ê–¥—Ä–µ—Å–∞: <b>{st['address']} –ø.{st['entrance']}</b>\n"
            f"üèôÔ∏è –†–∞–π–æ–Ω: <b>{st['district']}</b>\n"
            f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {st['issue']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {st['phone']}"
        )

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
        kb = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üì® –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É", callback_data="start"))
        bot.send_message(msg.chat.id, client_msg, reply_markup=kb)

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —É —á–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—É
        group = personnel_chats[district_ids[st["district"]]]
        group_kb = types.InlineKeyboardMarkup()
        group_kb.add(
            types.InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"status:done:{idx}"),
            types.InlineKeyboardButton("üö´ –ù–µ –ø—Ä–∞—Ü—é—î", callback_data=f"status:not_working:{idx}")
        )
        sent = bot.send_message(group, client_msg, reply_markup=group_kb)
        requests_list[idx]["chat_msg_id"] = sent.message_id
        requests_list[idx]["user_id"] = msg.chat.id

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∂–µ –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        save_requests_to_db()

        # üîî –í–µ–±-–ø—É—à
        send_push("–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞", f"{st['address']} ‚Äî {st['issue']}")

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞–≤–∞—Ä—ñ–π–Ω—É —Å–ª—É–∂–±—É
        phone_msg = "üî¥üö® <b>–ê–í–ê–†–Ü–ô–ù–ê –°–õ–£–ñ–ë–ê</b> üö®üî¥\n\n"
        for n in district_phones[st["district"]]:
            phone_msg += f"üìû <a href='tel:{n}'>{n}</a>\n"
        phone_msg += "\u0336".join("‚è±Ô∏è –ü—Ä–∞—Ü—é—î–º–æ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ!")
        bot.send_message(msg.chat.id, phone_msg)

        # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω
        user_states.pop(msg.chat.id)


@bot.message_handler(content_types=["location"])
def handle_location(msg):
    chat_id = msg.chat.id
    state = user_states.get(chat_id)
    if not state or state.get("step") != "choose_input":
        return

    latitude, longitude = msg.location.latitude, msg.location.longitude
    geolocator = Nominatim(user_agent="lift-bot", timeout=10)

    try:
        location = geolocator.reverse((latitude, longitude), language="uk")
        if not location or "road" not in location.raw["address"]:
            raise ValueError("No road in address")

        road_raw = location.raw["address"]["road"]
        house_number_raw = location.raw["address"].get("house_number", "")
        house_number = house_number_raw.upper()  # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±—É–∫–≤—ã –¥–æ–º–∞
        road_cleaned = clean_street_name(road_raw)

        found_district = None
        matched_street = None
        for district, streets in address_data.items():
            for street_name, buildings in streets.items():
                if road_cleaned in street_name.lower():
                    matched_street = street_name
                    found_district = district
                    break
            if matched_street:
                break

        if not matched_street or not house_number:
            return bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É.\n–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É –≤—Ä—É—á–Ω—É.")
        
        entrances = address_data.get(found_district, {}).get(matched_street, {}).get(house_number, {})
        if not entrances:
            return bot.send_message(chat_id, "‚ùå –¶–µ–π –±—É–¥–∏–Ω–æ–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –±–∞–∑—ñ.")
        if all(not v.get("active", True) for v in entrances.values()):
            return bot.send_message(chat_id, "‚õîÔ∏è –¶–µ–π –∞–¥—Ä–µ—Å –Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É—î—Ç—å—Å—è –∫–æ–º–ø–∞–Ω—ñ—î—é –ï–ª–µ—Å—Ç–µ–∫.")

        state["district"] = found_district
        state["address"] = f"{matched_street}, {house_number}"
        state["step"] = "enter_entrance"

        bot.send_message(chat_id, f"üìç –ê–¥—Ä–µ—Å–∞: <b>{state['address']}</b>\nüèôÔ∏è –†–∞–π–æ–Ω: <b>{state['district']}</b>", parse_mode="HTML")
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—ñ–¥'—ó–∑–¥—É:", reply_markup=types.ReplyKeyboardRemove())

    except Exception as e:
        logger.warning(f"Geolocation error: {e}")
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∞–¥—Ä–µ—Å—É –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—î—é.\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ó—ó –≤—Ä—É—á–Ω—É.")
        state["step"] = "choose_district"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for d in district_names:
            kb.add(d)
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:", reply_markup=kb)

@bot.chat_member_handler()
def handle_new_member(msg):
    # –î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–∞—Ç
    if msg.new_chat_member.status != "member":
        return

    chat_id = msg.chat.id
    user = msg.new_chat_member.user
    user_id = user.id

    # –ó–Ω–∞–π–¥–µ–º–æ –¥—ñ–ª—å–Ω–∏—Ü—é –∑–∞ chat_id
    section = None
    for sect, cid in personnel_chats.items():
        if cid == chat_id:
            section = sect
            break
    if not section:
        return

    # –Ø–∫—â–æ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∞–±–æ –∞–¥–º—ñ–Ω ‚Äî –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    if user_id in authorized_users.get(section, {}).get("authorized", []) \
       or user_id in authorized_users.get("ADMINS", []) \
       or user_id == bot.get_me().id:
        return

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è", callback_data=f"auth:{section}"))
    bot.send_message(chat_id, f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —á–∞—Ç–∞
@bot.message_handler(content_types=['left_chat_member'])
def handle_left_chat_member(msg):
    user = msg.left_chat_member
    user_id = user.id
    chat_id = msg.chat.id

    print(f"üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.first_name}) –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {chat_id}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–π–æ–Ω –ø–æ —á–∞—Ç—É
    section = None
    for sect, cid in personnel_chats.items():
        if cid == chat_id:
            section = sect
            break

    if not section:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        return

    changed = False

    # –£–¥–∞–ª—è–µ–º –∏–∑ authorized_users (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏)
    if section in authorized_users and isinstance(authorized_users[section], dict):
        authorized_list = authorized_users[section].get("authorized", [])
        if user_id in authorized_list:
            authorized_users[section]["authorized"].remove(user_id)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑ authorized –¥–ª—è {section}")
            changed = True

        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π —Ä–∞–π–æ–Ω–∞
        if authorized_users[section].get("representative") == user_id:
            authorized_users[section]["representative"] = None
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å {user_id} –¥–ª—è {section}")
            changed = True

    if changed:
        save_authorized_users()

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª
        log_action(user_id, "left_chat", {
            "section": section,
            "user_name": user.first_name,
            "chat_id": chat_id
        })

        print(f"üîÅ –í–∏–¥–∞–ª–µ–Ω–æ user_id {user_id} —ñ–∑ authorized_users –¥–ª—è {section}")
    else:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è {section}")

@bot.callback_query_handler(func=lambda c: c.data.startswith("auth:"))
def cb_auth(call):
    section = call.data.split(":")[1]
    user_id = call.from_user.id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
    authorized_users.setdefault(section, {})
    authorized_users[section].setdefault("authorized", [])

    # –î–æ–¥–∞—î–º–æ user_id, —è–∫—â–æ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–∏–π
    if user_id not in authorized_users[section]["authorized"]:
        authorized_users[section]["authorized"].append(user_id)
        save_authorized_users()

    bot.answer_callback_query(call.id, "‚úÖ –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")
    bot.edit_message_text("‚úÖ –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ —Ä–∞–π–æ–Ω—É.", call.message.chat.id, call.message.message_id)

@bot.message_handler(commands=["assign"])
def cmd_assign(msg):
    if msg.chat.id not in personnel_chats.values():
        return bot.reply_to(msg, "‚ùå –õ–∏—à–µ –≤ —á–∞—Ç—ñ —Ä–∞–π–æ–Ω—É.")

    if msg.from_user.id not in authorized_users.get("ADMINS", []):
        return bot.reply_to(msg, "‚õîÔ∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø—Ä–∏–∑–Ω–∞—á–∞—Ç–∏.")

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–∞–π–æ–Ω
    section = None
    for sect, chat_id in personnel_chats.items():
        if chat_id == msg.chat.id:
            section = sect
            break
    if not section:
        return

    # –í–∏–±—ñ—Ä –∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö
    members = authorized_users.get(section, {}).get("authorized", [])
    if not members:
        return bot.reply_to(msg, "‚ùå –ù–µ–º–∞—î –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ü—å–æ–º—É —Ä–∞–π–æ–Ω—ñ.")

    kb = types.InlineKeyboardMarkup(row_width=1)
    for uid in members:
        try:
            user = bot.get_chat_member(msg.chat.id, uid).user
            name = user.first_name or f"ID {uid}"
        except:
            name = f"ID {uid}"  # fallback —è–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º‚Äô—è
        btn = types.InlineKeyboardButton(
            f"üë§ {name}",
            callback_data=f"assign_rep:{section}:{uid}"
        )
        kb.add(btn)
    bot.send_message(msg.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞:", reply_markup=kb)

@bot.message_handler(commands=["unassign"])
def cmd_unassign(msg):
    if msg.chat.id not in personnel_chats.values():
        return bot.reply_to(msg, "‚ùå –õ–∏—à–µ –≤ —á–∞—Ç—ñ —Ä–∞–π–æ–Ω—É.")

    if msg.from_user.id not in authorized_users.get("ADMINS", []):
        return bot.reply_to(msg, "‚õîÔ∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏.")

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–π–æ–Ω—É
    section = None
    for sect, chat_id in personnel_chats.items():
        if chat_id == msg.chat.id:
            section = sect
            break
    if not section:
        return

    rep = authorized_users.get(section, {}).get("representative")
    if not rep:
        return bot.reply_to(msg, "‚ùå –ü—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π.")

    # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º‚Äô—è –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ get_chat_member
    try:
        member = bot.get_chat_member(msg.chat.id, rep)
        name = member.user.first_name
    except Exception as e:
        name = f"{rep} (–Ω–µ–≤—ñ–¥–æ–º–æ)"

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(f"üóëÔ∏è {name}", callback_data=f"unassign_rep:{section}:{rep}"))
    bot.send_message(msg.chat.id, "–°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞:", reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data.startswith("assign_rep:"))
def cb_assign_rep(call):
    _, section, user_id = call.data.split(":")
    user_id = int(user_id)

    authorized_users.setdefault(section, {})["representative"] = user_id
    save_authorized_users()
    bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ.")
    bot.edit_message_text("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º.", call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("unassign_rep:"))
def cb_unassign_rep(call):
    _, section, user_id = call.data.split(":")
    user_id = int(user_id)

    if authorized_users.get(section, {}).get("representative") == user_id:
        authorized_users[section]["representative"] = None
        save_authorized_users()
    bot.answer_callback_query(call.id, "‚úÖ –°–∫–∞—Å–æ–≤–∞–Ω–æ.")
    bot.edit_message_text("üóëÔ∏è –ü—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == "start")
def handle_start_callback(call):
    bot.answer_callback_query(call.id)
    return cmd_start(call.message)

@bot.callback_query_handler(func=lambda c: True)
def cb(call):
    if call.data == "start":
        return cmd_start(call.message)

    if call.data.startswith("filter:"):
        bot.answer_callback_query(call.id)
        filter_type = call.data.split(":")[1]

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–∞–π–æ–Ω —Ü—å–æ–≥–æ —á–∞—Ç—É
        chat_id = call.message.chat.id
        section = None
        for sect, cid in personnel_chats.items():
            if cid == chat_id:
                section = sect
                break

        if not section:
            return bot.send_message(chat_id, "‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ —á–∞—Ç–∞—Ö –¥—ñ–ª—å–Ω–∏—Ü—å.")

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞—è–≤–∫–∏ –ª–∏—à–µ –¥–ª—è —Ü—å–æ–≥–æ —Ä–∞–π–æ–Ω—É
        filtered = []
        for i, r in enumerate(requests_list):
            if district_ids[r["district"]] != section:
                continue
            if filter_type == "pending" and not r["completed"]:
                filtered.append((i, r))
            elif filter_type == "done" and r.get("status") == "done":
                filtered.append((i, r))
            elif filter_type == "error" and r.get("status") == "error":
                filtered.append((i, r))

        if not filtered:
            return bot.send_message(chat_id, "‚ùå –ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –¥–ª—è —Ü—å–æ–≥–æ —Ä–∞–π–æ–Ω—É –∑–∞ –æ–±—Ä–∞–Ω–∏–º —Ñ—ñ–ª—å—Ç—Ä–æ–º.")

        status_names = {
            "pending": "üïê –û—á—ñ–∫—É—é—Ç—å",
            "done": "‚úÖ –í–∏–∫–æ–Ω–∞–Ω—ñ",
            "error": "‚ùå –ù–µ –ø—Ä–∞—Ü—é—î"
        }
        msg_lines = [f"<b>{status_names.get(filter_type, '–ó–∞—è–≤–∫–∏')}:</b>"]

        for idx, r in filtered:
            url = f"https://t.me/c/{str(chat_id)[4:]}/{r['chat_msg_id']}"
            msg_lines.append(f"üìç <a href='{url}'>{r['address']} –ø.{r['entrance']}</a> ‚Äî {r['issue']}")

        bot.send_message(chat_id, "\n".join(msg_lines), parse_mode="HTML", disable_web_page_preview=True)
        return

    if not call.data.startswith("status:"):
        return

    _, action, idx = call.data.split(":")
    idx = int(idx)
    if idx >= len(requests_list):
        return

    r = requests_list[idx]

    # üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—É –Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
    section = district_ids.get(r["district"])
    if not chat_action_allowed.get(section, True):
        rep = authorized_users.get(section, {}).get("representative")
        allowed = (
            call.from_user.id in authorized_users.get("ADMINS", []) or
            call.from_user.id == rep
        )
        if not allowed:
            return bot.answer_callback_query(call.id, "‚õîÔ∏è –î—ñ—é –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")

    # ‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ
    if action == "done":
        r.update(
            completed=True,
            completed_time=datetime.now(kyiv_tz).strftime("%Y-%m-%d %H:%M:%S"),
            processed_by=call.from_user.first_name,
            status="done"
        )
        try:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        except:
            pass
        try:
            bot.send_message(r["user_id"], "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞.")
        except:
            pass

    # üö´ –ù–µ –ø—Ä–∞—Ü—é—î
    elif action == "not_working":
        r.update(
            completed=False,
            processed_by=call.from_user.first_name,
            status="error"
        )
        # –í–∏–¥–∞–ª—è—î–º–æ –ª–∏—à–µ –∫–Ω–æ–ø–∫—É üö´
        try:
            new_kb = types.InlineKeyboardMarkup()
            new_kb.add(
                types.InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"status:done:{idx}")
            )
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=new_kb)
        except:
            pass
        try:
            phones = "\n".join(f"üìû {n}" for n in district_phones[r['district']])
            bot.send_message(r["user_id"], f"‚ö†Ô∏è –ó–∞—è–≤–∫—É –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ, –∞–ª–µ –ª—ñ—Ñ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î.\n{phones}")
        except:
            pass

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    save_requests_to_db()
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=["help"])
def cmd_help(msg):
    commands_list = [
        "/start ‚Äì –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º",
        "/requests ‚Äì –ø–µ—Ä–µ–≥–ª—è–¥ –∑–∞—è–≤–æ–∫ (üïê –æ—á—ñ–∫—É—é—Ç—å, ‚úÖ –≤–∏–∫–æ–Ω–∞–Ω—ñ, ‚ùå –Ω–µ –ø—Ä–∞—Ü—é—î)",
        "/assign ‚Äì –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞ —Ä–∞–π–æ–Ω—É (–∞–¥–º—ñ–Ω)",
        "/unassign ‚Äì —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞ —Ä–∞–π–æ–Ω—É (–∞–¥–º—ñ–Ω)",
        "/disable ‚Äì –≤–∏–º–∫–Ω—É—Ç–∏ –±—É–¥–∏–Ω–æ–∫ –∞–±–æ –ø—ñ–¥'—ó–∑–¥",
        "/enable ‚Äì —É–≤—ñ–º–∫–Ω—É—Ç–∏ –±—É–¥–∏–Ω–æ–∫ –∞–±–æ –ø—ñ–¥'—ó–∑–¥",
    ]
    bot.send_message(msg.chat.id, "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n\n" + "\n".join(commands_list), parse_mode="HTML")


# ADDRESSES_FILE —ñ address_data —É —Ç–µ–±–µ –≤–∂–µ —î (—ñ–º–ø–æ—Ä—Ç —ñ–∑ shared)
# from app.bot_requests.shared import address_data, ADDRESSES_FILE, clean_street_name, personnel_chats, user_states, bot
# ‚Üë –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ clean_street_name —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ

def _save_atomic(data, path):
    """–ë–µ–∑–ø–µ—á–Ω–∏–π –∑–∞–ø–∏—Å JSON: —Å–ø–æ—á–∞—Ç–∫—É —É tmp-—Ñ–∞–π–ª, –ø–æ—Ç—ñ–º –∞—Ç–æ–º–∞—Ä–Ω–∞ –∑–∞–º—ñ–Ω–∞."""
    dirpath = os.path.dirname(path) or "."
    fd, tmp_path = tempfile.mkstemp(prefix=".addresses.", dir=dirpath)
    try:
        with os.fdopen(fd, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
            f.flush()
            os.fsync(f.fileno())
        os.replace(tmp_path, path)  # –∞—Ç–æ–º–∞—Ä–Ω–∞ –∑–∞–º—ñ–Ω–∞
    except Exception:
        try:
            os.remove(tmp_path)
        except Exception:
            pass
        raise

def refresh_addresses():
    """–ü—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∞–¥—Ä–µ—Å–∏ –∑ —Ñ–∞–π–ª—É –≤ address_data –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–±'—î–∫—Ç–∞."""
    try:
        with open(ADDRESSES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        address_data.clear()
        address_data.update(data)
    except FileNotFoundError:
        logger.warning("ADDRESSES_FILE not found, using in-memory address_data")
    except Exception as e:
        logger.exception(f"Failed to refresh addresses: {e}")

def save_addresses():
    """–ó–±–µ—Ä–µ–≥—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏ –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏."""
    _save_atomic(address_data, ADDRESSES_FILE)

@bot.message_handler(commands=["disable", "enable"])
def cmd_disable_enable(msg):
    # ‚úÖ –ª–∏—à–µ –≤ —Ä–∞–π–æ–Ω–Ω–∏—Ö –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö
    if msg.chat.type == "private":
        return bot.reply_to(msg, "‚õîÔ∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ —É —á–∞—Ç—ñ —Ä–∞–π–æ–Ω—É.")
    if msg.chat.id not in personnel_chats.values():
        return bot.reply_to(msg, "‚õîÔ∏è –¶–µ –Ω–µ —á–∞—Ç —Ä–∞–π–æ–Ω—É.")

    step = "enable" if msg.text.startswith("/enable") else "disable"
    user_states[msg.chat.id] = {"step": step}
    bot.send_message(
        msg.chat.id,
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –õ–∞–∑—É—Ä–Ω–∞ 32 –∞–±–æ –õ–∞–∑—É—Ä–Ω–∞ 32 –ø.1):"
    )

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") in ("disable", "enable"))
def handle_disable_enable(msg):
    step = user_states[msg.chat.id]["step"]
    enable = (step == "enable")

    text = msg.text.strip()
    parts = text.split()
    if len(parts) < 2:
        return bot.send_message(msg.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç: –í—É–ª–∏—Ü—è + –ù–æ–º–µ—Ä (—ñ –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º –ø.–•)")

    # –†–æ–∑–±—ñ—Ä "–≤—É–ª–∏—Ü—è –±—É–¥–∏–Ω–æ–∫ [–ø.X]"
    entrance = None
    if parts[-1].lower().startswith("–ø."):
        entrance = parts[-1][2:]
        house = parts[-2]
        street_q = " ".join(parts[:-2])
    else:
        house = parts[-1]
        street_q = " ".join(parts[:-1])

    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É
    try:
        street_q_norm = clean_street_name(street_q)
    except Exception:
        street_q_norm = street_q.lower()

    # –ü—ñ–¥—Ç—è–≥–Ω–µ–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –¥–∏—Å–∫–∞ (—â–æ–± –Ω–µ –ø–µ—Ä–µ—Ç–µ—Ä—Ç–∏ —á—É–∂—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ –∑–º—ñ–Ω–∏)
    refresh_addresses()

    found = False
    for district, streets in address_data.items():
        for street_name, houses in streets.items():
            # –º'—è–∫–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ–π –Ω–∞–∑–≤—ñ
            try:
                name_norm = clean_street_name(street_name)
            except Exception:
                name_norm = street_name.lower()

            if street_q_norm in name_norm:
                if house in houses:
                    if entrance:  # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—ñ–¥'—ó–∑–¥
                        if entrance in houses[house]:
                            # –∑–º—ñ–Ω—é—î–º–æ –ª–∏—à–µ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å active
                            houses[house][entrance]["active"] = enable
                            bot.send_message(
                                msg.chat.id,
                                f"‚úÖ {street_name} {house} –ø.{entrance} {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if enable else '–≤–∏–º–∫–Ω–µ–Ω–æ'}"
                            )
                            found = True
                        else:
                            return bot.send_message(msg.chat.id, "‚ùå –¢–∞–∫–æ–≥–æ –ø—ñ–¥'—ó–∑–¥—É –Ω–µ–º–∞—î.")
                    else:  # —É–≤–µ—Å—å –±—É–¥–∏–Ω–æ–∫
                        for ent_key, ent_val in houses[house].items():
                            # ent_val ‚Äî —Ü–µ —Å–ª–æ–≤–Ω–∏–∫ –ø—ñ–¥'—ó–∑–¥—É; —á—ñ–ø–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ active
                            if isinstance(ent_val, dict):
                                ent_val["active"] = enable
                        bot.send_message(
                            msg.chat.id,
                            f"‚úÖ –£—Å—ñ –ø—ñ–¥'—ó–∑–¥–∏ {street_name} {house} {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if enable else '–≤–∏–º–∫–Ω–µ–Ω–æ'}"
                        )
                        found = True
    if not found:
        return bot.send_message(msg.chat.id, "‚ùå –¢–∞–∫–æ—ó –∞–¥—Ä–µ—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    try:
        save_addresses()
    except Exception as e:
        logger.exception("save_addresses failed")
        return bot.send_message(msg.chat.id, f"‚õîÔ∏è –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")

    # –æ—á–∏—â–∞—î–º–æ state —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Å–µ–π–≤—É
    user_states.pop(msg.chat.id, None)
