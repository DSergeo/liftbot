# app/bot_maintenance/handlers.py
from app.bot_maintenance.shared import (
    bot, user_states, save_maintenance_log, maintenance_schedule, kyiv_tz,
    find_address_by_geo, get_entrances_for_building, schedule_key_candidates
)
from datetime import datetime, timedelta
import logging
import re
from io import BytesIO
from telebot import types
from PIL import Image
import pytesseract
import io
pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"

logger = logging.getLogger(__name__)

# ---------- Keyboards ----------
def location_keyboard() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é", request_location=True))
    return kb

def entrances_keyboard(entrances: list[str]) -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=5, one_time_keyboard=True)
    for e in entrances:
        kb.add(e)
    kb.add("–Ü–Ω—à–∏–π")
    return kb

# ---------- Helpers ----------
DATE_RE = re.compile(
    r'(?P<d>\b\d{1,2})[.\-/](?P<m>\d{1,2})[.\-/](?P<y>\d{2,4})\b'
)

def ocr_date_from_image(img: Image.Image) -> datetime | None:
    """–ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –¥–∞—Ç—É —Å —Ñ–æ—Ç–æ (—É–∫—Ä/—Ä—É—Å)."""
    try:
        text = pytesseract.image_to_string(img, lang="ukr+rus")
    except Exception:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —è–∑—ã–∫–∞
        text = pytesseract.image_to_string(img)
    # –ò—â–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É
    for m in DATE_RE.finditer(text):
        d = int(m.group("d"))
        mm = int(m.group("m"))
        yy = int(m.group("y"))
        if yy < 100:  # –Ω–∞–ø—Ä–∏–º–µ—Ä 25 -> 2025 (–≥—Ä—É–±–æ–µ –ø—Ä–∞–≤–∏–ª–æ)
            yy = 2000 + yy
        try:
            return datetime(yy, mm, d)
        except ValueError:
            continue
    return None

def allowed_by_schedule(street: str, building: str, dt: datetime) -> tuple[bool, str]:
    """
    –ò—â–µ–º –¥–∞—Ç—ã –≤ –≥—Ä–∞—Ñ–∏–∫–µ –ø–æ –∫–ª—é—á–∞–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è –Ω–∞ '<street> <building>'.
    –†–∞–∑—Ä–µ—à–∞–µ–º, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±4 –¥–Ω—ñ–≤.
    """
    keys = schedule_key_candidates(street, building)
    if not keys:
        return False, "‚ùå –í –≥—Ä–∞—Ñ—ñ–∫—É –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ –±—É–¥–∏–Ω–∫—É."

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–∞–º
    planned: list[datetime] = []
    for k in keys:
        for ds in maintenance_schedule.get(k, []):
            try:
                planned.append(datetime.strptime(ds, "%Y-%m-%d"))
            except Exception:
                pass

    if not planned:
        return False, "‚ùå –í –≥—Ä–∞—Ñ—ñ–∫—É –Ω–µ–º–∞—î –¥–∞—Ç –¥–ª—è —Ü—å–æ–≥–æ –±—É–¥–∏–Ω–∫—É."

    for p in planned:
        if abs((dt - p).days) <= 4:
            return True, ""

    return False, "‚ùå –î–∞—Ç–∞ –¢–û –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≥—Ä–∞—Ñ—ñ–∫—É (¬±4 –¥–Ω—ñ)."

# ---------- Handlers ----------
@bot.message_handler(commands=["start"])
def start(m):
    chat_id = m.chat.id
    user_states[chat_id] = {"step": "wait_location"}
    bot.send_message(
        chat_id,
        "üëã –í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ —Å–∫—Ä—ñ–ø–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
        reply_markup=location_keyboard()
    )

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ—â—ë –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é
@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get("step") is None, content_types=["text"])
def first_text(m):
    chat_id = m.chat.id
    user_states[chat_id] = {"step": "wait_location"}
    bot.send_message(
        chat_id,
        "üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —á–µ—Ä–µ–∑ —Å–∫—Ä—ñ–ø–∫—É (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É):",
        reply_markup=location_keyboard()
    )

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤—Å–µ–≥–¥–∞ (–±–µ–∑ –∂—ë—Å—Ç–∫–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —à–∞–≥—É)
@bot.message_handler(content_types=["location"])
def handle_location(msg):
    chat_id = msg.chat.id
    state = user_states.setdefault(chat_id, {})
    lat = msg.location.latitude
    lon = msg.location.longitude

    match = find_address_by_geo(lat, lon)
    if not match:
        # –ù–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω—É—é —Ç–æ—á–∫—É/—Ä–∞–¥–∏—É—Å
        state["step"] = "wait_location"
        bot.send_message(
            chat_id,
            "‚ùå –õ–æ–∫–∞—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ (—Ä–∞–¥—ñ—É—Å 10 –º). –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é —â–µ —Ä–∞–∑.",
            reply_markup=location_keyboard()
        )
        return

    district, street, building, entrance_detected = match
    all_entrances = get_entrances_for_building(street, building)

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–º–∞
    state.update({
        "step": "wait_entrance",
        "district": district,
        "street": street,
        "building": building,
        "suggested_entrance": entrance_detected,
        "entrances": all_entrances
    })

    # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω; –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å/–≤–≤–µ—Å—Ç–∏ –ø—ñ–¥‚Äô—ó–∑–¥
    text = (
        f"üèôÔ∏è –†–∞–π–æ–Ω: <b>{district}</b>\n"
        f"üì´ –ê–¥—Ä–µ—Å–∞: <b>{street} {building}</b>\n"
        f"üö™ –ü—ñ–¥'—ó–∑–¥ –ø–æ–±–ª–∏–∑—É: <b>{entrance_detected}</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥'—ó–∑–¥ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–Ü–Ω—à–∏–π¬ª —ñ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ."
    )
    kb = entrances_keyboard(all_entrances) if all_entrances else types.ReplyKeyboardRemove()
    bot.send_message(chat_id, text, reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—ñ–¥‚Äô—ó–∑–¥—É (–∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –≤—Ä—É—á–Ω—É—é)
@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "wait_entrance", content_types=["text"])
def handle_entrance(m):
    chat_id = m.chat.id
    state = user_states.setdefault(chat_id, {})
    txt = (m.text or "").strip()

    if txt == "–Ü–Ω—à–∏–π":
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—ñ–¥'—ó–∑–¥—É —Ü–∏—Ñ—Ä–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2).")
        state["step"] = "enter_entrance_manual"
        return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    entrances = state.get("entrances", [])
    if txt in entrances:
        state["entrance"] = txt
        state["step"] = "wait_photo"
        bot.send_message(
            chat_id,
            "üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∂—É—Ä–Ω–∞–ª—É –¢–û. –ü—ñ–¥–ø–∏—Å—É–≤–∞—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –±–æ—Ç –∑—á–∏—Ç–∞—î –¥–∞—Ç—É, —Ä–æ–±–æ—Ç–∏ —Ç–∞ –ø—ñ–¥–ø–∏—Å.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    # –ï—Å–ª–∏ —Ä—É–∫–∞–º–∏ –≤–≤–µ–ª–∏ —Ü–∏—Ñ—Ä—É
    if txt.isdigit():
        state["entrance"] = txt
        state["step"] = "wait_photo"
        bot.send_message(
            chat_id,
            "üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∂—É—Ä–Ω–∞–ª—É –¢–û. –ü—ñ–¥–ø–∏—Å—É–≤–∞—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –±–æ—Ç –∑—á–∏—Ç–∞—î –¥–∞—Ç—É, —Ä–æ–±–æ—Ç–∏ —Ç–∞ –ø—ñ–¥–ø–∏—Å.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø—ñ–¥'—ó–∑–¥ –∑ –∫–Ω–æ–ø–æ–∫ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä (1-99).")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "enter_entrance_manual", content_types=["text"])
def handle_entrance_manual(m):
    chat_id = m.chat.id
    state = user_states.setdefault(chat_id, {})
    txt = (m.text or "").strip()
    if not txt.isdigit():
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—ñ–¥'—ó–∑–¥—É —Ü–∏—Ñ—Ä–æ—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 3.")
        return
    state["entrance"] = txt
    state["step"] = "wait_photo"
    bot.send_message(
        chat_id,
        "üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∂—É—Ä–Ω–∞–ª—É –¢–û. –ü—ñ–¥–ø–∏—Å—É–≤–∞—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –±–æ—Ç –∑—á–∏—Ç–∞—î –¥–∞—Ç—É, —Ä–æ–±–æ—Ç–∏ —Ç–∞ –ø—ñ–¥–ø–∏—Å.",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –§–û–¢–û ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —ç—Ç–∞–ø —Ñ–∏–∫—Å–∞—Ü–∏–∏ –¢–û
@bot.message_handler(content_types=["photo"])
def handle_photo(msg):
    chat_id = msg.chat.id
    state = user_states.get(chat_id, {})
    if state.get("step") != "wait_photo":
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–æ –Ω–µ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é ‚Äî –º—è–≥–∫–∏–π –Ω–∞–º—ë–∫
        bot.send_message(chat_id, "–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é, –æ–±–µ—Ä—ñ—Ç—å –ø—ñ–¥'—ó–∑–¥ —ñ –ª–∏—à–µ –ø–æ—Ç—ñ–º —Ñ–æ—Ç–æ.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç—å
    try:
        file_id = msg.photo[-1].file_id
        info = bot.get_file(file_id)
        raw = bot.download_file(info.file_path)
        img = Image.open(BytesIO(raw))
    except Exception:
        logger.exception("Failed to download/open photo")
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # OCR: –∏—â–µ–º –¥–∞—Ç—É
    date_dt = ocr_date_from_image(img)
    if not date_dt:
        bot.send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –¥–∞—Ç—É –∑ —Ñ–æ—Ç–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—ñ–ª—å—à —á—ñ—Ç–∫–µ —Ñ–æ—Ç–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É (¬±4 –¥–Ω—ñ)
    street = state.get("street", "")
    building = state.get("building", "")
    ok, reason = allowed_by_schedule(street, building, date_dt)
    if not ok:
        bot.send_message(chat_id, reason or "‚ùå –î–∞—Ç–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≥—Ä–∞—Ñ—ñ–∫—É.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
    mechanic_name = msg.from_user.full_name
    full_address = f"{street} {building}"
    entrance = state.get("entrance", "")
    log_entry = {
        "mechanic_name": mechanic_name,
        "district": state.get("district", ""),
        "address": full_address,
        "entrance": entrance,
        "date": date_dt.strftime("%Y-%m-%d"),
        "photo_file_id": msg.photo[-1].file_id,
        "notes": "",  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å OCR-—Ç–µ–∫—Å—Ç–æ–º
        "verified": True,
        "created_at": datetime.now(kyiv_tz).isoformat()
    }
    save_maintenance_log(log_entry)

    # –ì–æ—Ç–æ–≤–æ
    bot.send_message(
        chat_id,
        f"‚úÖ –¢–û –∑–∞ –∞–¥—Ä–µ—Å–æ—é <b>{full_address}</b>, –ø—ñ–¥'—ó–∑–¥ <b>{entrance}</b> –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –Ω–∞ –¥–∞—Ç—É <b>{date_dt.strftime('%d.%m.%Y')}</b>."
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å—Ä–∞–∑—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø—ñ–¥‚Äô—ó–∑–¥—É
    user_states[chat_id] = {"step": "wait_location"}
    bot.send_message(
        chat_id,
        "–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —â–µ ‚Äî –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é.",
        reply_markup=location_keyboard()
    )

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –±–æ—Ç –∂–¥—ë—Ç —Ñ–æ—Ç–æ ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º
@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get("step") == "wait_photo", content_types=["text"])
def remind_photo(m):
    bot.send_message(m.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∂—É—Ä–Ω–∞–ª—É –¢–û.")
