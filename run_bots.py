# run_bots.py

import os
import threading
import time
import schedule
import logging
import pytz
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telebot import types
import threading
from flask import Flask, jsonify, request
from flask_cors import CORS

load_dotenv()

bot_api_app = Flask(__name__)
CORS(bot_api_app, resources={r"/*": {"origins": "*"}})
# ====== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ======
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ====== –ò–º–ø–æ—Ä—Ç –±–æ—Ç–æ–≤ –∏ –∏—Ö –ª–æ–≥–∏–∫–∏ ======
from app.bot_maintenance.shared import bot as maintenance_bot, init_database as init_maintenance_db
from app.bot_maintenance import handlers
from app.bot_requests.shared import (
    bot as requests_bot,
    init_database as init_requests_db,
    save_requests_to_db,
    load_requests_from_db,
    requests_list,
    personnel_chats,
    district_ids,
    district_phones
)
from app.bot_requests import handlers
# ====== –ü—É—Ç—å –∫ —Ç–æ–∫–µ–Ω–∞–º ======
BOT_TOKEN_REQUESTS = os.getenv("BOT_TOKEN_REQUESTS")
BOT_TOKEN_MAINTENANCE = os.getenv("BOT_TOKEN_MAINTENANCE")

# ====== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó –î–ê–ù–ù–´–• ======
init_maintenance_db()
logger.info("maintenance.db created.")
init_requests_db()
load_requests_from_db()

@bot_api_app.route("/requests_data")
def requests_data():
    """API endpoint for fetching requests data for the dashboard"""
    try:
        # Ensure we have the latest data from database
        load_requests_from_db()
        
        # Format requests for frontend from the same list the bot uses
        formatted_requests = []
        for i, req in enumerate(requests_list):
            formatted_req = {
                "id": i + 1,
                "timestamp": req.get("timestamp", ""),
                "name": req.get("name", ""),
                "phone": req.get("phone", ""),
                "address": req.get("address", ""),
                "entrance": req.get("entrance", ""),
                "district": req.get("district", ""),
                "issue": req.get("issue", ""),
                "status": req.get("status", "pending"),
                "completed": req.get("completed", False),
                "processed_by": req.get("processed_by", ""),
                "completed_time": req.get("completed_time", ""),
                "user_id": req.get("user_id", "")
            }
            formatted_requests.append(formatted_req)
        
        return jsonify({"requests": formatted_requests})
    except Exception as e:
        print(f"Error in requests_data: {e}")
        return jsonify({"error": "Failed to load requests", "requests": []})


@bot_api_app.route("/complete_request/<int:idx>", methods=["POST"])
def complete_request_api(idx):
    if 0 <= idx < len(requests_list):
        r = requests_list[idx]
        r.update(
            completed=True,
            completed_time=datetime.now(kyiv_tz).strftime("%Y-%m-%d %H:%M:%S"),
            processed_by="–û–ø–µ—Ä–∞—Ç–æ—Ä –∑ –≤–µ–±"
        )
        save_requests_to_db()

        try:
            requests_bot.edit_message_reply_markup(
                chat_id=personnel_chats[district_ids[r["district"]]],
                message_id=int(r["chat_msg_id"]),
                reply_markup=None
            )
        except: pass

        try:
            requests_bot.send_message(r["user_id"], "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞.")
        except: pass
        return jsonify({"success": True})
    return jsonify({"success": False})

@bot_api_app.route("/not_working_request/<int:idx>", methods=["POST"])
def not_working_request_api(idx):
    if 0 <= idx < len(requests_list):
        r = requests_list[idx]
        r.update(
            completed=True,
            completed_time=datetime.now(kyiv_tz).strftime("%Y-%m-%d %H:%M:%S"),
            processed_by="–û–ø–µ—Ä–∞—Ç–æ—Ä –∑ –≤–µ–±"
        )
        save_requests_to_db()

        try:
            from telebot import types  # —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å –Ω–∞–≤–µ—Ä—Ö—É

            new_kb = types.InlineKeyboardMarkup()
            new_kb.add(types.InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"status:done:{idx}"))
            requests_bot.edit_message_reply_markup(
                chat_id=personnel_chats[district_ids[r["district"]]],
                message_id=int(r["chat_msg_id"]),
                reply_markup=new_kb
            )

        except: pass

        try:
            phones = "\n".join(f"üìû {n}" for n in district_phones[r["district"]])
            requests_bot.send_message(r["user_id"],
                             "‚ö†Ô∏è –ó–∞—è–≤–∫—É –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ, –∞–ª–µ –ª—ñ—Ñ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î.\n" + phones)
        except: pass
        return jsonify({"success": True})
    return jsonify({"success": False})

@bot_api_app.route("/delete_request/<int:idx>", methods=["POST"])
def delete_request_api(idx):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º: {idx}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–Ω—ã–º
    if 0 <= idx < len(requests_list):
        try:
            logger.info(f"requests_list –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {len(requests_list)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –í–Ω–∏–º–∞–Ω–∏–µ: –µ—Å–ª–∏ –≤—ã —É–¥–∞–ª—è–µ—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            # –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å, –∏–Ω–¥–µ–∫—Å –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º.
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã.
            
            del requests_list[idx]
            save_requests_to_db()
            
            logger.info(f"–ó–∞—è–≤–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {idx} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            logger.info(f"requests_list –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {len(requests_list)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            return jsonify({"success": True})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º {idx}: {e}", exc_info=True)
            return jsonify({"success": False})
    else:
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {idx}. requests_list –∏–º–µ–µ—Ç {len(requests_list)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")
        return jsonify({"success": False})

@bot_api_app.route("/update_status/<int:idx>/<action>", methods=["POST"])
def update_status_api(idx, action):
    logger.info(f"üîÑ –ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ #{idx}, –¥—ñ—è: {action}")

    if 0 <= idx < len(requests_list):
        r = requests_list[idx]

        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        r["completed"] = True
        r["completed_time"] = datetime.now(kyiv_tz).strftime("%Y-%m-%d %H:%M:%S")
        r["processed_by"] = "–û–ø–µ—Ä–∞—Ç–æ—Ä –∑ –≤–µ–±"

        if action == "done":
            r["status"] = "done"
        elif action == "not_working":
            r["status"] = "error"

        save_requests_to_db()
        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{idx} –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: {r['status']}")

        try:
            if action == "not_working":
                # –∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–Ω–æ–ø–∫—É "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ"
                new_kb = types.InlineKeyboardMarkup()
                new_kb.add(
                    types.InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"status:done:{idx}")
                )
                requests_bot.edit_message_reply_markup(
                    chat_id=personnel_chats[district_ids[r["district"]]],
                    message_id=int(r["chat_msg_id"]),
                    reply_markup=new_kb
                )
                logger.info(f"‚Ü©Ô∏è –ö–Ω–æ–ø–∫–∏ –∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ ‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ (district {r['district']})")
            else:
                # —è–∫—â–æ "‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ" ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏
                requests_bot.edit_message_reply_markup(
                    chat_id=personnel_chats[district_ids[r["district"]]],
                    message_id=int(r["chat_msg_id"]),
                    reply_markup=None
                )
                logger.info(f"üóë –ö–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–æ —É —á–∞—Ç—ñ (district {r['district']})")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫–∏: {e}")

        try:
            if action == "done":
                requests_bot.send_message(r["user_id"], "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞.")
                logger.info(f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {r['user_id']} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: –≤–∏–∫–æ–Ω–∞–Ω–æ")
            elif action == "not_working":
                phones = "\n".join(f"üìû {n}" for n in district_phones[r["district"]])
                requests_bot.send_message(
                    r["user_id"],
                    f"‚ö†Ô∏è –ó–∞—è–≤–∫—É –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ, –∞–ª–µ –ª—ñ—Ñ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î.\n{phones}"
                )
                logger.info(f"üì© –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {r['user_id']} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: –ª—ñ—Ñ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {r['user_id']}: {e}")

        return jsonify({"success": True})

    logger.error(f"‚ùå –ó–∞—è–≤–∫–∏ #{idx} –Ω–µ —ñ—Å–Ω—É—î")
    return jsonify({"success": False})

# ====== VAPID –∫–ª—é—á–∏ –¥–ª—è Web Push ======
@bot_api_app.route("/vapid_public_key")
def get_vapid_key_api():
    return jsonify({"key": VAPID_PUBLIC_KEY})

@bot_api_app.route("/subscribe_push", methods=["POST"])
def subscribe_push_api():
    sub = request.get_json()
    if sub and sub not in subscriptions:
        subscriptions.append(sub)
        save_subscriptions()
    return jsonify({"success": True})

# ====== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ======
kyiv_tz = pytz.timezone("Europe/Kyiv")

def send_daily():
    summary = {}
    for i, r in enumerate(requests_list):
        if r["completed"]:
            continue
        chat = personnel_chats[district_ids[r["district"]]]
        summary.setdefault(chat, [])
        url = f"https://t.me/c/{str(chat)[4:]}/{r['chat_msg_id']}"
        summary[chat].append(f"#{i + 1} <a href='{url}'>{r['address']} –ø.{r['entrance']}</a>")
    for chat, lines in summary.items():
        requests_bot.send_message(chat, "üìã <b>–ù–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ –∑–∞—è–≤–∫–∏:</b>\n" + " \n".join(lines), parse_mode="HTML")


def sched_loop():
    test_delay_minutes = 0 # üîπ –º–µ–Ω—è–π —Ç–æ–ª—å–∫–æ —ç—Ç—É —Ü–∏—Ñ—Ä—É
    if test_delay_minutes > 0:
        run_time = (datetime.now() + timedelta(minutes=test_delay_minutes)).strftime("%H:%M")
        logger.info(f"‚è∞ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {test_delay_minutes} –º–∏–Ω, –≤ {run_time}")
        schedule.every().day.at(run_time).do(send_daily)
    else:
        logger.info("‚è∞ –ë–æ–µ–≤–æ–π —Ä–µ–∂–∏–º: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:30")
        schedule.every().day.at("08:30").do(send_daily)

    while True:
        schedule.run_pending()
        time.sleep(60)

# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö ======
def start_requests_bot():
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–æ—Ç –∑–∞—è–≤–æ–∫...")
    while True:
        try:
            requests_bot.infinity_polling(timeout=60, long_polling_timeout=60, allowed_updates=True)
        except Exception as e:
            logger.error(f"Polling –∑–∞—è–≤–æ–∫ —É–ø–∞–ª: {e}", exc_info=True)
            time.sleep(5)

def start_maintenance_bot():
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–æ—Ç –¢–û...")
    while True:
        try:
            maintenance_bot.infinity_polling(timeout=60, long_polling_timeout=60, allowed_updates=True)
        except Exception as e:
            logger.error(f"Polling –¢–û —É–ø–∞–ª: {e}", exc_info=True)
            time.sleep(5)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=lambda: bot_api_app.run(host="127.0.0.1", port=5001)).start() 

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=sched_loop, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    threading.Thread(target=start_requests_bot, daemon=True).start()
    threading.Thread(target=start_maintenance_bot, daemon=True).start()
    
    logger.info("–ë–æ—Ç—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω—ã. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
    while True:
        time.sleep(1)